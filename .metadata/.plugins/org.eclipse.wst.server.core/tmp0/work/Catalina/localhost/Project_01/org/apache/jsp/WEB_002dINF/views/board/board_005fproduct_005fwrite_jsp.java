/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-08-25 00:11:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class board_005fproduct_005fwrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("jar:file:/C:/workspace/spring_mvc/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Project_01/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/workspace/spring_mvc/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Project_01/WEB-INF/lib/spring-webmvc-5.3.9.jar!/META-INF/spring-form.tld", Long.valueOf(1626212264000L));
    _jspx_dependants.put("jar:file:/C:/workspace/spring_mvc/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Project_01/WEB-INF/lib/spring-webmvc-5.3.9.jar!/META-INF/spring.tld", Long.valueOf(1626212264000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1627439210123L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-5.3.9.jar", Long.valueOf(1627439430870L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write(" <script>\r\n");
      out.write("    //상품을 추가하기위한 정보를 담아 insert.do로 보내는 자바스크립트 함수\r\n");
      out.write("    function product_write() {\r\n");
      out.write(" \r\n");
      out.write("        var product_name = document.form1.product_name.value; // document는 웹페이지에 접근하기위한 객체.. form1에 있는 상품이름을 반환해서 name에 저장함\r\n");
      out.write("        var price = document.form1.price.value; // document는 웹페이지에 접근하기위한 객체.. form1에 있는 상품의 값을 반환해서 price에 저장함\r\n");
      out.write("        var description = document.form1.description.value; // document는 웹페이지에 접근하기위한 객체.. form1에 있는 상품의 정보를 반환해서 description에 저장함\r\n");
      out.write("        \r\n");
      out.write("        //document.form.은 폼페이지에 있는 값을 반환한다는 뜻.\r\n");
      out.write(" \r\n");
      out.write("        if (product_name == \"\") { //상품 이름이 입력되어 있지 않으면\r\n");
      out.write("            alert(\"상품명을 입력하세요\");\r\n");
      out.write("            document.form1.product_name.focus(); //form1페이지에 있는 \"상품명을 입력하세요\" 에 커서를 올려둔다.\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        if (price == \"\") { //상품가격이 입력되어 있지 않으면\r\n");
      out.write("            alert(\"가격을 입력하세요\");\r\n");
      out.write("            document.form1.price.focus(); //form1페이지에 있는 \"가격을 입력하세요\" 에 커서를 올려둔다.\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        if (description == \"\") { //상품설명이 입력되어 있지 않으면\r\n");
      out.write("            alert(\"상품설명을 입력하세요\");\r\n");
      out.write("            document.form1.description.focus(); //form1페이지에 있는 \"상품설명을 입력하세요\" 에 커서를 올려둔다.\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        // input 태그를 마우스로 클릭하여 입력상태로 만든것을 포커스를 얻었다고 한다.\r\n");
      out.write("       // 그리고 입력상태를 떠난 것을 포커스가 벗어났다고 한다.\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        document.form1.action = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/shop/product/insert.do\"; //insert.do 페이지로 form1에 저장된 자료를 전송함\r\n");
      out.write("        document.form1.submit();\r\n");
      out.write("    }\r\n");
      out.write(" </script>\r\n");
      out.write(" </head>\r\n");
      out.write(" <body>\r\n");
      out.write("<!-- \r\n");
      out.write("     <!-- 관리자용 메뉴는 일반 회원의 메뉴와 다르기 때문에 일부러 관리자용 메뉴를 만들고 그 메뉴를 출력한다. -->\r\n");
      out.write("    <h2>상품 등록</h2>\r\n");
      out.write("    <form id=\"form1\" name=\"form1\" method=\"post\"\r\n");
      out.write("        enctype=\"multipart/form-data\">\r\n");
      out.write("        <!-- 파일업로드를 위해 추가하는 타입 -->\r\n");
      out.write(" \r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>상품명</td>\r\n");
      out.write("                <td><input name=\"product_name\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>가격</td>\r\n");
      out.write("                <td><input name=\"price\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>상품설명</td>\r\n");
      out.write("                <td><textarea rows=\"5\" cols=\"60\" name=\"description\"\r\n");
      out.write("                        id=\"description\"></textarea></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>상품이미지</td>\r\n");
      out.write("                <td><input type=\"file\" name=\"file1\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write(" \r\n");
      out.write("                <td colspan=\"2\" align=\"center\"><input type=\"button\" value=\"등록\"\r\n");
      out.write("                    onclick=\"product_write()\"> <!-- \"등록\" 버튼을 누르면 위쪽에 있는 스크립트문에서 product_write()함수가 호출되서 실행되 insert.do페이지로 자료를 전송한다. -->\r\n");
      out.write("                    <input type=\"button\" value=\"목록\"\r\n");
      out.write("                    onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/admin/product/list.do'\"> <!-- \"목록 버튼을 누르면 list.do페이지로 이동\" -->\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("    </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
